
# Code Structure

## java/com/vaadin:
Holds the files for creating the application using vaadin, querying
GoogleFit and the MongoDB database.

### model
Holds the classes used for authentication, querying GoogleFit and the
MongoDB database.

#### ApiRequest:
Deals with the Google Fit api request, the OAuth 2.0 and the loads the
client secret.

#### AuthRequest:
Inits the GoogleAuthorizationCodeFlow, creates the credentials and
handles the return codes for the VaadinRequests.

#### DataRequest:
Requests the fitness data for the current user from GoogleFit.

#### DbConnector:
Stores the fitness data for the current in the MongoDB, and handles
queries to the database.
**Note**: Due to a low number of actual TrackFit users, we create some
random data whenever there is no data available by GoogleFit. This
can be disabled by setting the value of the boolean generateRandomData
(line ~200) to false.

#### ReturnCodeHandler:
Handles the Vaadin requests and sets the authorization request for the
authentication process.

### ui
Holds the classes related with the user interface.

#### ChartComponent:
Placeholder for the charts drawn in javascript. Also holds all the .js
files which are required for the application. Calling its function
setData triggers the setData function for the GraphConnector (see below)
which results in redrawing all of the javascript visualizations with the
new data. Thus it basically connects the java and the javascript
functionality.

#### ChartComponentState:
Simple helper class which holds the data for the ChartComponent which
is passed to the javascript part.

#### LoginDesign:
Automatically generated by the Vaadin designer for the equivalent
LoginDesign.html file (see below).

#### MainDesign:
Automatically generated by the Vaadin designer for the equivalent
MainDesign.html file (see below).

#### MainView
Subclass of MainDesign with logic and additional interfaces as proposed
by Vaadin. Deals with setting up the application (connecting to the DB;
downloading the data; setting the data for the plots) by calling the
respective functions and the listeners for the menu items.

#### SelectedOptions
Object which represents the current selected options by the user, e.g.
the selected plot, the selected time intervals for the data or the color
selected by the user for the line chart. The object is then passed in
.json format to javascript.

## resources/com/vaadin/ui
Holds the .html file for the application itself, the javascript files
for the charts and the javascript equivalent of the ChartComponent.

#### CalendarChart:
Draws the calendar chart for displaying the activities.

#### GraphConnector:
Connects javascript with java. Whenever its state changes (e.g. if a
different plot or time interval is selected), it tells the GraphSelector
(see below) to redraw the charts according to the provided data and the
selected options.

#### GraphSelector:
Selects which graph should be displayed based on SelectedOptions and
calls the respective javascript functions.

#### HelperFunctions:
Holds some functions for the different charts which are not directly
related with drawing.

#### LineChart:
Draws the line chart for displaying the steps.

#### LoginDesign:
The html file for the login window.

#### MainDesign:
The html file for the application itself.

#### StackedBarChart:
Draws the stacked bar chart for displaying the activities.

## webapp/VAADIN/themes/mytheme
Holds all the style sheets for the application. Most of the code is
automatically generated by Vaadin.

# Hints

## Adding a new plot:
* the data passed from java to javascript is an array of objects (one
object for each day) with the following structure:
```javascript
       { still: 25533517, walking: 1161451, in_vehicle: 1675745, â€¦ } // holds the activities; duration in milliseconds
       averageSteps: 3399.5                         // avg steps by all users
       startDateInUTC: 1516147200000        // date in UTC
       stdErrorOfMean: 1372.5                      // SEM for the steps
       steps: 4772                                          // user steps
```
* create the .js file for the new plot; add it to the
resources/com/vaadin/ui folder.
* add the .js file at the end of the list in the ChartComponent.java
class (lines 6+7)
* in GraphSelector.js: add a new case for the switch in the drawChart
function which should call the newly created draw function
* in MainDesign.html: add a new button which should draw the new plot
* in MainView.java: add the listener for the new button in the
addListenerToView function
* Done :)

## Adding more activity types:
While all activity types provided by GoogleFit (see https://developers.google.com/fit/rest/v1/reference/activity-types)
are requested, only the following activity types are actually stored in
the database:
* in_vehicle
* on_bicycle
* on_foot
* running
* still
* walking
* sleeping

To store more/other activity types in the database adjust the HashMap
activityTypesValuesMapper in DbConnector.java accordingly.

**Note**: Since the StackedBarChart uses a hard coded color scale with
10 different colors for the activities, it might be necessary to use
a larger color scale. Simply replace
``` javascript
var colorRange = ['#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a'];
```
in StackedBarChart.js with the new color scale.
